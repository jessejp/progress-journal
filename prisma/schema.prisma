// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Subject {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  icon      String   @default("üìù") @db.VarChar(4)
  entries   Entry[]

  @@index([userId])
}

model Entry {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Subject    Subject  @relation(fields: [subjectId], references: [id])
  subjectId  String
  fields     Field[]
  template   Boolean  @default(false)
  categories String?  @db.VarChar(64) // used for loading the options in config, max 5 categories

  @@index([subjectId])
}

model Field {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  entry       Entry?       @relation(fields: [entryId], references: [id])
  entryId     String
  name        String       @db.VarChar(36)
  category    String?      @db.VarChar(12) // used for filtering in new entry
  fieldInputs FieldInput[]

  @@index([entryId])
}

model FieldInput {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  field        Field    @relation(fields: [fieldId], references: [id])
  fieldId      String
  valueNumber  Float?   @db.Float
  valueString  String?  @db.VarChar(510)
  valueBoolean Boolean?
  inputHelper  String?  @db.VarChar(36)
  inputType    String

  @@index([fieldId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  subjects      Subject[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
